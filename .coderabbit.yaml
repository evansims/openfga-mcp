# CodeRabbit Configuration
# Automated PR Review Settings for OpenFGA MCP Server

version: "1"
language: "en-US"

# Review Settings
reviews:
  # High-level summary of the PR
  high_level_summary: true

  # Generate poem or mnemonic to remember the PR
  poem: false

  # Enable PR review with comments
  review_status: true

  # Collapse PR walkthrough for cleaner initial view
  collapse_walkthrough: false

  # Review all changes in a PR
  changed_files_review: true

  # Mark a pull request as approved once all comments have been addressed
  request_changes_workflow: true

  # Automatically approve minor dependency updates
  auto_review:
    enabled: true
    labels:
      - "dependencies"
      - "dependabot"

# Path-Specific Instructions
path_instructions:
  - path: "**/*.php"
    instructions: |
      - Enforce strict typing with declare(strict_types=1)
      - Ensure all classes are declared as 'final' unless explicitly designed for inheritance
      - Verify PHPStan level max and Psalm errorLevel 1 compliance
      - Check for proper error handling with clear emoji indicators (✅ for success, ❌ for errors)
      - No suppression annotations (@suppress, @psalm-suppress, @phpstan-ignore) allowed
      - Verify PSR-4 autoloading compliance
      - Ensure proper use of PHP 8.3+ features
      - Check for SOLID, DRY, and KISS principle adherence

  - path: "src/Tools/**/*.php"
    instructions: |
      - Tools must modify state or trigger external processes
      - Verify proper implementation of MCP tool patterns
      - Check for appropriate error handling and return types
      - Ensure tools don't mix data access with actions

  - path: "src/Resources/**/*.php"
    instructions: |
      - Resources must be read-only - no state modifications allowed
      - Verify URIs follow pattern: openfga://[resource-path]
      - Check that all resource classes extend AbstractResources
      - Ensure methods return arrays or strings for TextContent conversion

  - path: "src/Templates/**/*.php"
    instructions: |
      - Templates must use URI templates (RFC 6570) for parameterization
      - Verify proper parameter validation and sanitization
      - Check for potential injection vulnerabilities in template substitution

  - path: "tests/**/*.php"
    instructions: |
      - All code changes MUST have accompanying tests
      - Verify tests use Pest framework syntax correctly
      - Check for proper test isolation and no test skipping
      - Ensure comprehensive coverage of edge cases
      - Verify tests follow AAA pattern (Arrange, Act, Assert)

  - path: "tests/Fuzzing/**/*.php"
    instructions: |
      - Fuzzing targets must implement fuzz() and getInitialCorpus() methods
      - Verify isExpectedError() properly filters expected validation errors
      - Check for security-focused test coverage
      - Ensure proper input validation boundaries are tested

  - path: ".github/workflows/*.yml"
    instructions: |
      - Verify all actions use SHA-pinned versions for security
      - Check for minimal required permissions (least privilege)
      - Ensure secrets are not exposed in logs
      - Verify proper error handling and job dependencies

  - path: "**/Dockerfile*"
    instructions: |
      - Verify multi-stage builds are used to minimize image size
      - Ensure base images use SHA256 digests for reproducibility
      - Check that containers run as non-root user (mcp:mcp with UID/GID 1000)
      - Verify proper file ownership with --chown=mcp:mcp
      - Ensure Alpine base images are used for production
      - Check layer caching optimization (composer files before source)
      - Verify build dependencies are cleaned up (apk del, cache removal)
      - Ensure HEALTHCHECK is properly configured
      - Check that only necessary ports are exposed
      - Verify proper use of ENTRYPOINT and CMD

  - path: "**/docker-compose*.yml"
    instructions: |
      - Check for custom networks instead of default bridge
      - Verify proper service dependencies with depends_on
      - Ensure volumes are properly mounted with correct permissions
      - Check that sensitive data is not hardcoded
      - Verify services use container names for inter-service communication

  - path: ".dockerignore"
    instructions: |
      - Ensure all development files are excluded (vendor/, .git/, etc.)
      - Verify logs, caches, and temporary files are excluded
      - Check that sensitive files are not included in build context

  - path: "composer.json"
    instructions: |
      - Check for PHP 8.3+ requirement
      - Verify no unnecessary dependencies
      - Ensure proper version constraints
      - Check that security-related packages are up to date

# General Review Instructions
instructions: |
  ## Critical Requirements for PHP Code:

  1. **Type Safety**: All PHP files must have strict_types=1 declaration
  2. **Linting Compliance**: Code must pass PHPStan (level max), Psalm (errorLevel 1), Rector, and PHP-CS-Fixer
  3. **No Suppression**: Never suggest @suppress, @psalm-suppress, or @phpstan-ignore annotations
  4. **Testing**: Every code change must include tests using Pest framework
  5. **Final Classes**: All classes should be declared 'final' unless designed for inheritance

  ## OpenFGA MCP Specific:

  1. **MCP Pattern Compliance**:
     - Tools act (modify state)
     - Resources inform (read-only)
     - Templates generate (parameterized resources)
     - Prompts guide (AI instructions)

  2. **OpenFGA SDK Usage**:
     - Use correct method patterns: listStores(), getStore(), check(), expand()
     - Access tuple data correctly: $tuple->getKey()->getUser()
     - Use grantPermission() not createRelationship()

  3. **Error Handling**: Use emoji indicators consistently (✅ success, ❌ errors)

  ## Security Focus:

  1. Check for injection vulnerabilities (SQL, command, XSS, header injection)
  2. Verify proper input validation and sanitization
  3. Ensure no secrets or credentials in code
  4. Check for SSRF prevention in URL handling
  5. Verify proper authentication and authorization

  ## Docker Best Practices:

  1. **Security**: Non-root users, minimal base images, SHA-pinned images
  2. **Optimization**: Multi-stage builds, layer caching, dependency cleanup
  3. **Configuration**: Proper HEALTHCHECK, documented ENV variables
  4. **Build Context**: Comprehensive .dockerignore file
  5. **Supply Chain**: SBOM generation, provenance attestations

# Tool Configuration
tools:
  # PHP Linting Tools
  phpcs:
    enabled: true

  phpstan:
    enabled: true
    level: max

  psalm:
    enabled: true
    error_level: 1

  # Documentation
  markdownlint:
    enabled: true

  # Security
  gitleaks:
    enabled: true

  # Spelling
  misspell:
    enabled: true

# Chat Settings
chat:
  auto_reply: true

# Labeling Configuration
labels:
  auto: true
  extra_labels:
    - "security-review-needed:security"
    - "needs-tests:tests/**"
    - "documentation:*.md"
    - "dependencies:composer.json"
    - "ci-cd:.github/**"

# Review Profiles
review_profile:
  - name: "security"
    description: "Enhanced security review"
    instructions: |
      Focus on:
      - Input validation and sanitization
      - Authentication and authorization logic
      - Cryptographic operations
      - Injection vulnerabilities
      - SSRF and path traversal
      - Secret management

  - name: "performance"
    description: "Performance optimization review"
    instructions: |
      Check for:
      - N+1 query problems
      - Inefficient algorithms
      - Memory leaks
      - Unnecessary API calls
      - Caching opportunities

  - name: "docker"
    description: "Docker and containerization review"
    instructions: |
      Focus on:
      - Security: non-root users, minimal attack surface
      - Image size optimization and multi-stage builds
      - Supply chain security (pinned versions, attestations)
      - Proper secrets management
      - Health checks and graceful shutdown
      - Network isolation and service dependencies
