name: Docker

# This workflow builds and publishes Docker images

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag"
        required: false
        default: "latest"
  release:
    types: [published]
  push:
    branches: ["main"]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "pyproject.toml"
      - "uv.lock"

jobs:
  # Load configuration using the reusable workflow
  config:
    name: Load Configuration
    uses: ./.github/workflows/load-config.yml

  # Build and push Docker image
  docker:
    name: Build and Push Docker Image
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            ${{ github.event_name == 'workflow_dispatch' && format('type=raw,value={0}', github.event.inputs.tag) || '' }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Scan Docker image for vulnerabilities
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: "ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version || github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"
          ignore-unfixed: true

      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3.28.11
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      # Notify about Docker image build
      - name: Notify
        uses: ./.github/workflows/notify.yml
        with:
          message: "Docker image built and pushed"
          details: |
            Repository: ${{ github.repository }}
            Tags: ${{ steps.meta.outputs.tags }}
          success: true
