name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v1.2.3)"
        required: true
        type: string

# Set default permissions to minimum required
permissions:
  contents: read

jobs:
  # Load configuration using the reusable workflow
  config:
    name: Load Configuration
    uses: ./.github/workflows/load-config.yml

  # Build and publish to PyPI
  publish:
    name: Build and Publish
    needs: [config]
    runs-on: ubuntu-latest
    environment: publish
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || inputs.tag }}

      # Use the composite action for Python setup
      - name: Set up Python
        uses: ./.github/actions/python-setup
        with:
          python-version: ${{ needs.config.outputs.python_version }}
          cache: "true"
          install-dev: "true"

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME="${{ github.event.release.tag_name || inputs.tag }}"
          if [[ $TAG_NAME =~ ^v(.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version: $VERSION from tag: $TAG_NAME"
          else
            echo "::error::Could not extract version from tag $TAG_NAME"
            exit 1
          fi

      - name: Install package in development mode
        run: |
          python -m pip install -e .
          echo "Package installed in development mode"

      - name: Verify package version
        run: |
          # Get current package version directly from the package
          PACKAGE_VERSION=$(python -m openfga_mcp --version)

          echo "Package version: $PACKAGE_VERSION"
          echo "Expected version: ${{ steps.extract_version.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "${{ steps.extract_version.outputs.version }}" ]; then
            echo "::error::Version mismatch! Expected version ${{ steps.extract_version.outputs.version }} but found $PACKAGE_VERSION"
            exit 1
          fi

          echo "Version verification successful: $PACKAGE_VERSION matches tag version"

      - name: Build package
        run: make build
        env:
          UV_CACHE_DIR: ${{ runner.temp }}/uv-cache

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom.spdx.json
          artifact-name: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

      - name: Verify and publish package
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7
