name: "Quality: Changelog Check"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  check-changelog:
    name: Verify CHANGELOG Update
    runs-on: ubuntu-latest

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Check CHANGELOG modifications
        id: check
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Skip check for Dependabot PRs
          if [ "$PR_AUTHOR" = "dependabot[bot]" ] || [ "$PR_AUTHOR" = "dependabot" ]; then
            echo "ℹ️ Skipping changelog check for Dependabot PR"
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "message=Changelog check skipped for Dependabot" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get the base branch (usually main)
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Check if CHANGELOG.md exists
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found in the repository"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=CHANGELOG.md file not found" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Determine the expected section based on conventional commit type
          get_section() {
            local title="$1"
            local type=$(echo "$title" | grep -oE '^[a-z]+(\([^)]+\))?:' | sed 's/:$//' | sed 's/(.*//') || echo ""
            
            case "$type" in
              feat|feature) echo "Added" ;;
              fix|bugfix) echo "Fixed" ;;
              docs|documentation) echo "Documentation" ;;
              style|formatting) echo "Style" ;;
              refactor|refactoring) echo "Changed" ;;
              perf|performance) echo "Performance" ;;
              test|tests|testing) echo "Tests" ;;
              build|ci|chore) echo "Maintenance" ;;
              revert) echo "Reverted" ;;
              *) echo "Other" ;;
            esac
          }
          
          # Get the expected section for this PR
          EXPECTED_SECTION=$(get_section "$PR_TITLE")
          
          # Check if CHANGELOG.md has been modified in this PR
          git fetch origin $BASE_BRANCH
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD)
          
          if ! echo "$CHANGED_FILES" | grep -q "^CHANGELOG.md$"; then
            echo "❌ CHANGELOG.md has not been updated in this PR"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Please update CHANGELOG.md with an entry for this PR in the [Unreleased] section under '### $EXPECTED_SECTION'" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Get the actual changes to CHANGELOG.md
          CHANGELOG_DIFF=$(git diff origin/$BASE_BRANCH...HEAD -- CHANGELOG.md)
          
          # Check if new content was added (not just removed or modified)
          if ! echo "$CHANGELOG_DIFF" | grep -q "^+[^+]"; then
            echo "❌ No new content added to CHANGELOG.md"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Please add a new entry to CHANGELOG.md in the [Unreleased] section" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if the changes are in the Unreleased section
          ADDED_LINES=$(echo "$CHANGELOG_DIFF" | grep "^+" | grep -v "^+++" | sed 's/^+//')
          
          # Check if PR number is referenced in the new content
          if ! echo "$ADDED_LINES" | grep -q "#$PR_NUMBER\|#${PR_NUMBER}]\|\[#${PR_NUMBER}\]"; then
            echo "⚠️ Warning: PR #$PR_NUMBER is not referenced in the CHANGELOG entry"
            echo "Consider adding a reference like [#$PR_NUMBER](https://github.com/${{ github.repository }}/pull/$PR_NUMBER)"
          fi
          
          echo "✅ CHANGELOG.md has been updated"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=CHANGELOG.md has been properly updated" >> $GITHUB_OUTPUT

      - name: Update PR status check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ steps.check.outputs.status }}';
            const message = '${{ steps.check.outputs.message }}';
            
            // Create a status check
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status === 'success' ? 'success' : status === 'skipped' ? 'success' : 'failure',
              target_url: `${context.payload.pull_request.html_url}/files#diff-${Buffer.from('CHANGELOG.md').toString('base64')}`,
              description: message.substring(0, 140), // GitHub limits description to 140 chars
              context: 'Changelog Verification'
            });
            
            // Add a comment if the check failed
            if (status === 'failed') {
              // Format the PR title for the changelog example
              const prTitle = '${{ github.event.pull_request.title }}';
              let formattedTitle = prTitle;
              
              // Check if title already has conventional commit prefix
              const hasPrefix = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?:/.test(prTitle);
              if (!hasPrefix) {
                // Add a default prefix if missing
                const section = message.includes('### ') ? message.split('### ')[1].split("'")[0] : 'Added';
                let prefix = 'feat';
                if (section === 'Fixed') prefix = 'fix';
                else if (section === 'Changed') prefix = 'refactor';
                else if (section === 'Documentation') prefix = 'docs';
                else if (section === 'Tests') prefix = 'test';
                else if (section === 'Maintenance') prefix = 'chore';
                
                formattedTitle = prefix + ': ' + prTitle.charAt(0).toLowerCase() + prTitle.slice(1);
              } else {
                // Ensure lowercase for consistency
                formattedTitle = prTitle.charAt(0).toLowerCase() + prTitle.slice(1);
              }
              
              const commentBody = `## ❌ Changelog Check Failed
            
            ${message}
            
            ### How to fix:
            
            1. Update \`CHANGELOG.md\` in the \`[Unreleased]\` section
            2. Add your change under the appropriate subsection (e.g., ### Added, ### Fixed, etc.)
            3. Include a reference to this PR: \`[#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})\`
            
            Example entry:
            \`\`\`markdown
            ## [Unreleased]
            
            ### ${message.includes('### ') ? message.split('### ')[1].split("'")[0] : 'Added'}
            
            - ${formattedTitle} ([#${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }}))
            \`\`\``;
            
              // Check if we already commented
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Changelog Check Failed')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
              }
            }