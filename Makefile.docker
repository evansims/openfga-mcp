# OpenFGA MCP Docker Makefile
# Provides commands for running all Makefile tooling inside Docker

# ===== Default Goal =====
.DEFAULT_GOAL := help

# ===== Variables =====
SHELL := /bin/bash
PROJECT_NAME := openfga-mcp
DOCKER_DEV_IMAGE_NAME := $(PROJECT_NAME)-dev
DOCKER_DEV_TAG ?= latest
DOCKER_FULL_DEV_NAME := $(DOCKER_DEV_IMAGE_NAME):$(DOCKER_DEV_TAG)

# Colors for terminal output
BOLD := $(shell tput bold)
GREEN := $(shell tput setaf 2)
YELLOW := $(shell tput setaf 3)
RED := $(shell tput setaf 1)
RESET := $(shell tput sgr0)

# ===== PHONY Targets =====
.PHONY: help dev-image docker-make docker-setup docker-dev docker-test docker-test-cov docker-lint \
        docker-type-check docker-format docker-security docker-check docker-all docker-clean \
        docker-build docker-publish docker-docs docker-docs-serve docker-version docker-release \
        docker-update docker-run docker-shell docker-repl docker-ipython

# ===== Default Target =====
help:
	@echo "$(BOLD)OpenFGA MCP Docker Development Commands$(RESET)"
	@echo "========================================"
	@echo "$(BOLD)Docker Development:$(RESET)"
	@echo "  $(GREEN)dev-image$(RESET)           - Build development Docker image"
	@echo "  $(GREEN)docker-make$(RESET)         - Run any make command in Docker (CMD=\"command\")"
	@echo "  $(GREEN)docker-setup$(RESET)        - Set up development environment in Docker"
	@echo "  $(GREEN)docker-dev$(RESET)          - Install package in development mode in Docker"
	@echo "  $(GREEN)docker-run$(RESET)          - Run the server in Docker"
	@echo "  $(GREEN)docker-update$(RESET)       - Update dependencies in Docker"
	@echo "  $(GREEN)docker-shell$(RESET)        - Start shell in Docker container"
	@echo "  $(GREEN)docker-repl$(RESET)         - Start Python REPL in Docker"
	@echo "  $(GREEN)docker-ipython$(RESET)      - Start IPython REPL in Docker"
	@echo ""
	@echo "$(BOLD)Docker Quality:$(RESET)"
	@echo "  $(GREEN)docker-test$(RESET)         - Run tests in Docker"
	@echo "  $(GREEN)docker-test-cov$(RESET)     - Run tests with coverage in Docker"
	@echo "  $(GREEN)docker-lint$(RESET)         - Run linting in Docker"
	@echo "  $(GREEN)docker-type-check$(RESET)   - Run type checking in Docker"
	@echo "  $(GREEN)docker-format$(RESET)       - Format code in Docker"
	@echo "  $(GREEN)docker-security$(RESET)     - Run security checks in Docker"
	@echo "  $(GREEN)docker-check$(RESET)        - Run tests, lint, type-check in Docker"
	@echo "  $(GREEN)docker-all$(RESET)          - Run all checks including security in Docker"
	@echo ""
	@echo "$(BOLD)Docker Build & Release:$(RESET)"
	@echo "  $(GREEN)docker-clean$(RESET)        - Remove build artifacts in Docker"
	@echo "  $(GREEN)docker-build$(RESET)        - Build package in Docker"
	@echo "  $(GREEN)docker-publish$(RESET)      - Publish package to PyPI from Docker"
	@echo "  $(GREEN)docker-docs$(RESET)         - Build documentation in Docker"
	@echo "  $(GREEN)docker-docs-serve$(RESET)   - Serve documentation from Docker"
	@echo "  $(GREEN)docker-version$(RESET)      - Display current version from Docker"
	@echo "  $(GREEN)docker-release$(RESET)      - Prepare a release from Docker"
	@echo ""
	@echo "$(BOLD)Original Makefile:$(RESET)"
	@echo "  $(GREEN)make help$(RESET)           - Show original Makefile commands"
	@echo ""
	@echo "$(BOLD)Usage:$(RESET)"
	@echo "  Run any command from the original Makefile in Docker with:"
	@echo "  $(GREEN)make docker-make CMD=\"command\"$(RESET)"

# ===== Development Docker Image =====
dev-image:
	@echo "$(BOLD)Building development Docker image...$(RESET)"
	docker build -f Dockerfile.dev -t $(DOCKER_FULL_DEV_NAME) .
	@echo "$(GREEN)Development Docker image built successfully!$(RESET)"

# ===== Docker Make Command =====
docker-make:
	@if [ -z "$(CMD)" ]; then \
		echo "$(RED)Error: No command specified$(RESET)"; \
		echo "Usage: make docker-make CMD=\"your make command\""; \
		exit 1; \
	fi
	docker run --rm -it \
		-v $(PWD):/app \
		-w /app \
		$(DOCKER_FULL_DEV_NAME) \
		make $(CMD)

# ===== Docker Development Commands =====
docker-setup:
	@echo "$(BOLD)Setting up development environment in Docker...$(RESET)"
	make docker-make CMD="setup"

docker-dev:
	@echo "$(BOLD)Installing package in development mode in Docker...$(RESET)"
	make docker-make CMD="dev"

docker-run:
	@echo "$(BOLD)Running the server in Docker...$(RESET)"
	docker run --rm -it \
		-v $(PWD):/app \
		-w /app \
		-p 8000:8000 \
		$(DOCKER_FULL_DEV_NAME) \
		make run

docker-update:
	@echo "$(BOLD)Updating dependencies in Docker...$(RESET)"
	make docker-make CMD="update"

docker-shell:
	@echo "$(BOLD)Starting shell in Docker container...$(RESET)"
	docker run --rm -it \
		-v $(PWD):/app \
		-w /app \
		$(DOCKER_FULL_DEV_NAME) \
		/bin/bash

docker-repl:
	@echo "$(BOLD)Starting Python REPL in Docker...$(RESET)"
	make docker-make CMD="repl"

docker-ipython:
	@echo "$(BOLD)Starting IPython REPL in Docker...$(RESET)"
	make docker-make CMD="ipython"

# ===== Docker Quality Commands =====
docker-test:
	@echo "$(BOLD)Running tests in Docker...$(RESET)"
	make docker-make CMD="test"

docker-test-cov:
	@echo "$(BOLD)Running tests with coverage in Docker...$(RESET)"
	make docker-make CMD="test-cov"

docker-lint:
	@echo "$(BOLD)Running linting in Docker...$(RESET)"
	make docker-make CMD="lint"

docker-type-check:
	@echo "$(BOLD)Running type checking in Docker...$(RESET)"
	make docker-make CMD="type-check"

docker-format:
	@echo "$(BOLD)Formatting code in Docker...$(RESET)"
	make docker-make CMD="format"

docker-security:
	@echo "$(BOLD)Running security checks in Docker...$(RESET)"
	make docker-make CMD="security"

docker-check:
	@echo "$(BOLD)Running tests, lint, type-check in Docker...$(RESET)"
	make docker-make CMD="check"

docker-all:
	@echo "$(BOLD)Running all checks including security in Docker...$(RESET)"
	make docker-make CMD="all"

# ===== Docker Build & Release Commands =====
docker-clean:
	@echo "$(BOLD)Removing build artifacts in Docker...$(RESET)"
	make docker-make CMD="clean"

docker-build:
	@echo "$(BOLD)Building package in Docker...$(RESET)"
	make docker-make CMD="build"

docker-publish:
	@echo "$(BOLD)Publishing package to PyPI from Docker...$(RESET)"
	make docker-make CMD="publish"

docker-docs:
	@echo "$(BOLD)Building documentation in Docker...$(RESET)"
	make docker-make CMD="docs"

docker-docs-serve:
	@echo "$(BOLD)Serving documentation from Docker...$(RESET)"
	docker run --rm -it \
		-v $(PWD):/app \
		-w /app \
		-p 8000:8000 \
		$(DOCKER_FULL_DEV_NAME) \
		make docs-serve

docker-version:
	@echo "$(BOLD)Displaying current version from Docker...$(RESET)"
	make docker-make CMD="version"

docker-release:
	@echo "$(BOLD)Preparing a release from Docker...$(RESET)"
	make docker-make CMD="release"
