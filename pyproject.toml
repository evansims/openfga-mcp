[project]
name = "openfga-mcp"
version = "0.0.1"
description = "An experimental Model Context Protocol (MCP) server providing tools to read, search, and manipulate OpenFGA stores programmatically via Large Language Models (LLMs)."
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "OpenFGA" }]
maintainers = [{ name = "Evan Sims", email = "hello@evansims.com" }]
keywords = [
    "mcp",
    "llm",
    "automation",
    "openfga",
    "authorization",
    "fine-grained-access",
]
license = { text = "Apache-2.0" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Operating System :: OS Independent",
]
dependencies = [
    "typer[all]>=0.9.0",
    "mcp[cli]>=1.3.0",
    "openfga-sdk>=0.9.1",
    "rich>=13.0.0",
]

[project.urls]
"Homepage" = "https://github.com/evansims/openfga-mcp"
"Bug Tracker" = "https://github.com/evansims/openfga-mcp/issues"
"Documentation" = "https://github.com/evansims/openfga-mcp/tree/main/docs"
"Source Code" = "https://github.com/evansims/openfga-mcp"

[project.optional-dependencies]
dev = [
    "pyright>=1.1.389",
    "ruff>=0.7.3",
    "pytest>=8.0.0",
    "pre-commit>=3.5.0",
    "commitizen>=3.13.0",
    "uv>=0.1.0",          # Fast Python package installer and resolver
    "coverage>=7.3.0",    # Code coverage measurement
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",    # Optional: For parallel test execution
    "pytest-mock>=3.10.0",    # For mocking in tests
    "pytest-asyncio>=0.21.0", # For testing async code
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings>=0.22.0",       # For API documentation from docstrings
    "mkdocstrings-python>=1.1.0", # Python handler for mkdocstrings
]

[project.scripts]
openfga-mcp-server = "openfga_mcp:app"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/openfga_mcp"]

# Make sure source distributions include all necessary files
[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "tests/",
    "docs/",
    "LICENSE",
    "README.md",
    "CHANGELOG.md",
    "pyproject.toml",
]

# Ensure reproducible builds
[tool.hatch.build]
reproducible = true

[tool.uv]
dev-dependencies = [
    "pyright >= 1.1.389",
    "ruff >= 0.7.3",
    "pytest >= 8.0.0",
    "pre-commit >= 3.5.0",
    "commitizen >= 3.13.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=src/openfga-mcp --cov-report=xml --cov-report=term"
asyncio_default_fixture_loop_scope = "function"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/openfga-mcp/__init__.py:__version__",
]
update_changelog_on_bump = true
bump_message = "chore(release): bump version to $new_version"

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",
    "F",
    "B",
    "I",
    "N",
    "UP",
    "S",
    "A",
    "C4",
    "T20",
    "PT",
    "RET",
    "SIM",
]
ignore = ["E501"]

[tool.ruff.isort]
known-first-party = ["openfga_mcp"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", "**/.venv"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"
typeCheckingMode = "basic"
